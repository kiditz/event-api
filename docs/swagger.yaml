basePath: /api/v1
definitions:
  entity.Billing:
    properties:
      amount:
        type: number
      brief_id:
        type: integer
      due_date:
        type: string
      has_paid:
        type: boolean
      id:
        type: integer
      order_id:
        type: string
      user:
        $ref: '#/definitions/entity.User'
        type: object
      user_id:
        type: integer
    required:
    - brief_id
    type: object
  entity.BillingFilter:
    properties:
      end_date:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      query:
        type: string
      start_date:
        type: string
    type: object
  entity.Brief:
    properties:
      category:
        $ref: '#/definitions/entity.Category'
        type: object
      category_id:
        type: integer
      company:
        $ref: '#/definitions/entity.Company'
        type: object
      company_id:
        type: integer
      currency:
        type: string
      detail:
        type: string
      end_date:
        type: string
      end_time:
        type: string
      gender:
        type: string
      height:
        type: integer
      id:
        type: integer
      location:
        $ref: '#/definitions/entity.Location'
        type: object
      location_id:
        type: integer
      payment_days:
        $ref: '#/definitions/entity.PaymentDays'
        type: object
      payment_days_id:
        type: integer
      payment_terms:
        $ref: '#/definitions/entity.PaymentTerms'
        type: object
      payment_terms_id:
        type: integer
      price:
        type: number
      staff_amount:
        type: integer
      start_date:
        type: string
      start_time:
        type: string
      status:
        type: string
      sub_categories:
        items:
          $ref: '#/definitions/entity.SubCategory'
        type: array
      title:
        type: string
    required:
    - currency
    - detail
    - price
    - staff_amount
    - title
    type: object
  entity.BriefInfo:
    properties:
      approved_count:
        type: integer
      images:
        items:
          type: string
        type: array
      quotation_count:
        type: integer
      staff_amount:
        type: integer
    type: object
  entity.BriefsFilter:
    properties:
      date:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      onlyme:
        type: boolean
      q:
        type: string
    type: object
  entity.BusinessType:
    properties:
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
    type: object
  entity.Cart:
    properties:
      category_id:
        type: integer
      device_id:
        type: string
      device_name:
        type: string
      device_version:
        type: string
      id:
        type: integer
      service_id:
        type: integer
    type: object
  entity.Category:
    properties:
      is_searchable:
        type: boolean
      is_usable:
        type: boolean
      name:
        type: string
      slug:
        type: string
      sub_categories:
        items:
          $ref: '#/definitions/entity.SubCategory'
        type: array
      template:
        type: string
      use_gender:
        type: boolean
      use_height:
        type: boolean
      use_location:
        type: boolean
      use_price_dropdown:
        type: boolean
      use_shift:
        type: boolean
      use_when:
        type: boolean
    type: object
  entity.Company:
    properties:
      background_image:
        $ref: '#/definitions/entity.Image'
        type: object
      category:
        $ref: '#/definitions/entity.Category'
        type: object
      category_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      image:
        $ref: '#/definitions/entity.Image'
        type: object
      is_updated:
        type: boolean
      is_verified:
        type: boolean
      name:
        type: string
      phone:
        type: string
      sub_category:
        $ref: '#/definitions/entity.SubCategory'
        type: object
      sub_category_id:
        type: integer
      user:
        $ref: '#/definitions/entity.User'
        type: object
    required:
    - name
    type: object
  entity.Document:
    properties:
      file_type:
        type: string
      filename:
        type: string
      id:
        type: integer
      message:
        type: string
      size:
        type: integer
      url:
        type: string
    type: object
  entity.Expertise:
    properties:
      is_searchable:
        type: boolean
      is_usable:
        type: boolean
      name:
        type: string
      slug:
        type: string
    type: object
  entity.FilteredQuotations:
    properties:
      brief_id:
        type: integer
      limit:
        type: integer
      offset:
        type: integer
      status:
        type: string
    type: object
  entity.FilteredTalent:
    properties:
      brief_id:
        type: integer
      category_id:
        type: integer
      expertise_name:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      q:
        type: string
      sub_category_id:
        type: integer
    type: object
  entity.FilteredUsers:
    properties:
      brief_id:
        type: integer
      category_id:
        type: integer
      expertise_name:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      q:
        type: string
      sub_category_id:
        type: integer
    type: object
  entity.Image:
    properties:
      id:
        type: integer
      image_url:
        type: string
    required:
    - image_url
    type: object
  entity.Income:
    properties:
      agency_fee:
        type: integer
      amount:
        type: number
      brief_id:
        type: integer
      can_withdrawal:
        type: boolean
      has_withdraw:
        type: boolean
      id:
        type: integer
      order_id:
        type: string
      user_id:
        type: integer
      withdrawal_time:
        type: string
    required:
    - brief_id
    type: object
  entity.IncomeFilter:
    properties:
      can_withdrawal:
        type: boolean
      end_date:
        type: string
      has_withdraw:
        type: boolean
      limit:
        type: integer
      offset:
        type: integer
      query:
        type: string
      start_date:
        type: string
    type: object
  entity.Invitation:
    properties:
      brief:
        $ref: '#/definitions/entity.Brief'
        type: object
      brief_id:
        type: integer
      id:
        type: integer
      service:
        $ref: '#/definitions/entity.Service'
        type: object
      service_id:
        type: integer
      status:
        type: string
    required:
    - brief_id
    - service_id
    type: object
  entity.InvitationCount:
    properties:
      count:
        type: integer
    type: object
  entity.ItemDetails:
    properties:
      brand:
        type: string
      id:
        type: string
      merchant_name:
        type: string
      name:
        type: string
      order_id:
        type: integer
      price:
        type: number
      quantity:
        type: integer
    required:
    - name
    - price
    - quantity
    type: object
  entity.LimitOffset:
    properties:
      limit:
        type: integer
      offset:
        type: integer
    type: object
  entity.Location:
    properties:
      address:
        type: string
      formatted_address:
        type: string
      icon:
        type: string
      id:
        type: integer
      international_phone_number:
        type: string
      lat:
        type: number
      lng:
        type: number
      name:
        type: string
      phone_number:
        type: string
      place_id:
        type: string
    required:
    - formatted_address
    - lat
    - lng
    type: object
  entity.Occupation:
    properties:
      is_searchable:
        type: boolean
      is_usable:
        type: boolean
      name:
        type: string
      slug:
        type: string
    type: object
  entity.Order:
    properties:
      brief_id:
        type: integer
      custom_field1:
        type: string
      custom_field2:
        type: string
      custom_field3:
        type: string
      id:
        type: integer
      id_user:
        type: integer
      item_details:
        items:
          $ref: '#/definitions/entity.ItemDetails'
        type: array
      redirect_url:
        type: string
      token:
        type: string
      transaction_detail_id:
        type: integer
      transaction_details:
        $ref: '#/definitions/entity.TransactionDetails'
        type: object
      transaction_status:
        type: string
      transaction_time:
        type: string
    required:
    - brief_id
    - id_user
    type: object
  entity.PaymentDays:
    properties:
      days:
        type: integer
      id:
        type: integer
    required:
    - days
    type: object
  entity.PaymentNotification:
    properties:
      approval_code:
        type: string
      currency:
        type: string
      custom_field1:
        type: string
      custom_field2:
        type: string
      custom_field3:
        type: string
      fraud_status:
        type: string
      gross_amount:
        type: string
      id:
        type: integer
      merchant_id:
        type: string
      order_id:
        type: string
      payment_type:
        type: string
      settlement_time:
        type: string
      signature_key:
        type: string
      status_code:
        type: string
      status_message:
        type: string
      transaction_id:
        type: string
      transaction_status:
        type: string
      transaction_time:
        type: string
    type: object
  entity.PaymentTerms:
    properties:
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
    required:
    - name
    type: object
  entity.Portfolio:
    properties:
      id:
        type: integer
      image_url:
        type: string
      service_id:
        type: integer
      title:
        type: string
    type: object
  entity.Quotation:
    properties:
      brief_id:
        type: integer
      id:
        type: integer
      invitation_id:
        type: integer
      message:
        type: string
      price:
        type: number
      service:
        $ref: '#/definitions/entity.Service'
        type: object
      service_id:
        type: integer
      status:
        type: string
    required:
    - brief_id
    - message
    - price
    - service
    - service_id
    - status
    type: object
  entity.QuotationIdentity:
    properties:
      quotation_id:
        type: integer
    type: object
  entity.QuotationList:
    properties:
      currency:
        type: string
      id:
        type: integer
      image_url:
        type: string
      message:
        type: string
      name:
        type: string
      price:
        type: number
      service_category:
        type: string
      service_image_url:
        type: string
      status:
        type: string
    type: object
  entity.Rate:
    properties:
      criteria:
        type: string
      height:
        type: integer
      id:
        type: integer
      price:
        type: number
      sub_category_slug:
        type: string
      total_followers:
        type: integer
    type: object
  entity.RejectInvitation:
    properties:
      invitation_id:
        type: integer
    type: object
  entity.Service:
    properties:
      backgrounds:
        items:
          $ref: '#/definitions/entity.Image'
        type: array
      category:
        $ref: '#/definitions/entity.Category'
        type: object
      category_id:
        type: integer
      cpv:
        type: number
      description:
        type: string
      id:
        type: integer
      language:
        type: string
      portfolios:
        items:
          $ref: '#/definitions/entity.Portfolio'
        type: array
      price:
        type: number
      status:
        type: string
      sub_category:
        $ref: '#/definitions/entity.SubCategory'
        type: object
      sub_category_id:
        type: integer
      title:
        type: string
      topics:
        items:
          $ref: '#/definitions/entity.Expertise'
        type: array
      user:
        $ref: '#/definitions/entity.User'
        type: object
      user_id:
        type: integer
    required:
    - description
    - language
    - title
    type: object
  entity.SocialMedia:
    properties:
      icon:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  entity.StopBrief:
    properties:
      id:
        type: integer
    type: object
  entity.SubCategory:
    properties:
      category_id:
        type: integer
      is_searchable:
        type: boolean
      is_usable:
        type: boolean
      name:
        type: string
      slug:
        type: string
    type: object
  entity.Talent:
    properties:
      background:
        $ref: '#/definitions/entity.Image'
        type: object
      background_image_id:
        type: integer
      birth_date:
        type: string
      business_type_id:
        type: integer
      description:
        type: string
      engagement:
        type: number
      expertises:
        items:
          $ref: '#/definitions/entity.Expertise'
        type: array
      facebook_followers_count:
        type: integer
      facebook_link:
        type: string
      gender:
        type: string
      height:
        type: integer
      id:
        type: integer
      image:
        $ref: '#/definitions/entity.Image'
        type: object
      instagram_followers_count:
        type: integer
      instagram_link:
        type: string
      is_verified:
        type: boolean
      location:
        $ref: '#/definitions/entity.Location'
        type: object
      location_id:
        type: integer
      occupations:
        items:
          $ref: '#/definitions/entity.Occupation'
        type: array
      phone:
        type: string
      twitter_followers_count:
        type: integer
      twitter_link:
        type: string
      youtube_followers_count:
        type: integer
      youtube_link:
        type: string
    required:
    - birth_date
    - gender
    - height
    - instagram_link
    type: object
  entity.TalentResults:
    properties:
      category_name:
        type: string
      image_url:
        type: string
      name:
        type: string
      service_id:
        type: integer
      start_price:
        type: number
      sub_category_name:
        type: string
      talent_id:
        type: integer
    type: object
  entity.TransactionDetails:
    properties:
      billing:
        type: number
      down_payment:
        type: number
      gross_amount:
        type: number
      id:
        type: integer
      order_id:
        type: string
    type: object
  entity.User:
    properties:
      active:
        type: boolean
      background_image_url:
        type: string
      currency:
        type: string
      email:
        type: string
      image_url:
        type: string
      language:
        type: string
      name:
        type: string
      services:
        items:
          $ref: '#/definitions/entity.Service'
        type: array
      talent:
        $ref: '#/definitions/entity.Talent'
        type: object
      type:
        type: string
    required:
    - currency
    - email
    - language
    - name
    - type
    type: object
  entity.UserForm:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      type:
        type: string
    required:
    - email
    - name
    - password
    - type
    type: object
  translate.ResultErrors:
    properties:
      message:
        example: Dynamic message
        type: string
      status:
        example: Bad Request
        type: string
      status_code:
        example: 400
        type: integer
    type: object
  translate.ResultSuccess:
    properties:
      data:
        type: object
      status:
        example: OK
        type: string
      status_code:
        example: 200
        type: integer
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is event staffing application management
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: StafSus Application
  version: "1.0"
paths:
  /account:
    get:
      consumes:
      - application/json
      description: Find user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindUserByLoggedIn api used to find user by token
      tags:
      - users
  /account/{id}:
    get:
      consumes:
      - application/json
      description: Find user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindUserByID api used to find user by primary key
      tags:
      - users
  /auth/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Sign in by using email and password
      parameters:
      - description: your account email
        in: query
        name: email
        required: true
        type: string
      - description: your account password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Brief'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/translate.ResultErrors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: Sign In
      tags:
      - users
  /briefs:
    get:
      consumes:
      - application/json
      description: find campaign by date
      parameters:
      - in: query
        name: date
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: onlyme
        type: boolean
      - in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Brief'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetBriefs used to find campaign by specific params
      tags:
      - briefs
    post:
      description: Create a new campaign
      parameters:
      - description: New Brief
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/entity.Brief'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Brief'
              type: object
      security:
      - ApiKeyAuth: []
      summary: AddBrief api used to create new campaign
      tags:
      - briefs
  /briefs/{id}:
    get:
      consumes:
      - application/json
      description: find campaign by id
      parameters:
      - description: Brief ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Brief'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindcampaignById used to find campaign by it's primary key
      tags:
      - briefs
  /briefs/documents:
    post:
      consumes:
      - multipart/form-data
      description: Upload file
      parameters:
      - description: campaign image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Document'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/translate.ResultErrors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: Upload documents
      tags:
      - briefs
  /briefs/info/{id}:
    get:
      consumes:
      - application/json
      description: used to find campaign information
      parameters:
      - description: Brief ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.BriefInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetBriefInfo used to find campaign information
      tags:
      - briefs
  /briefs/payment-days:
    get:
      consumes:
      - application/json
      description: find all payment days
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.PaymentDays'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetPaymentDays used to find all payment days list
      tags:
      - briefs
  /briefs/payment-terms:
    get:
      consumes:
      - application/json
      description: find all payment terms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.PaymentTerms'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetPaymentTerms used to find all payment terms list
      tags:
      - briefs
  /briefs/social-media:
    get:
      consumes:
      - application/json
      description: find campaign by date
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.SocialMedia'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetAllSocialMedia used to find all social media list
      tags:
      - briefs
  /briefs/stop:
    post:
      description: Create a new campaign
      parameters:
      - description: New Brief
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/entity.StopBrief'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Brief'
              type: object
      security:
      - ApiKeyAuth: []
      summary: AddBrief api used to create new campaign
      tags:
      - briefs
  /business-type:
    get:
      consumes:
      - application/json
      description: used to find all business types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.BusinessType'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: GetBusinesType used to find all business types
      tags:
      - categories
  /cart:
    delete:
      description: add to cart
      parameters:
      - description: Device ID
        in: query
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Cart'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: DeleteCart api used to delete cart for specific device
      tags:
      - orders
    post:
      description: add to cart
      parameters:
      - description: Add To Cart
        in: body
        name: talent
        required: true
        schema:
          $ref: '#/definitions/entity.Cart'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Cart'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: AddCart api used to create new cart for specific email address
      tags:
      - orders
  /carts:
    get:
      description: find carts
      parameters:
      - description: Device ID
        in: query
        name: device_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Cart'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetCarts api used to find cart for specific device
      tags:
      - orders
  /categories:
    get:
      consumes:
      - application/json
      description: find all category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Category'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetCategories used to find all categories
      tags:
      - categories
  /company:
    get:
      consumes:
      - application/json
      description: find company logged in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Company'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindCompany used to find company logged in
      tags:
      - company
    put:
      description: Edit company
      parameters:
      - description: Company Data
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/entity.Company'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Company'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: Edit company
      tags:
      - company
  /company/billings:
    get:
      consumes:
      - application/json
      description: find billings of user
      parameters:
      - in: query
        name: end_date
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: query
        type: string
      - in: query
        name: start_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Billing'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetBilling find billings of user
      tags:
      - company
  /expertises:
    get:
      consumes:
      - application/json
      description: used to find all expertises
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Expertise'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: GetExpertises used to find all expertises
      tags:
      - categories
  /invitation:
    post:
      description: create new invitation
      parameters:
      - description: Invitation
        in: body
        name: talent
        required: true
        schema:
          $ref: '#/definitions/entity.Invitation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Invitation'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: AddInvitation api used to create new invitation for talent service
      tags:
      - orders
  /invitation/accept:
    post:
      description: accept invitation and generate quote
      parameters:
      - description: Quotation
        in: body
        name: quotation
        required: true
        schema:
          $ref: '#/definitions/entity.Quotation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Quotation'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: AcceptInvitation api used to accept invitation and generate quote
      tags:
      - orders
  /invitation/count:
    get:
      description: find carts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.InvitationCount'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetInvitationsCount api used to find invitation count
      tags:
      - orders
  /invitation/reject:
    post:
      description: reject invitation
      parameters:
      - description: RejectInvitation
        in: body
        name: quotation
        required: true
        schema:
          $ref: '#/definitions/entity.RejectInvitation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Invitation'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: RejectInvitation api used to reject invitation
      tags:
      - orders
  /invitations:
    get:
      description: find invitations
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Invitation'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetInvitations api used to invitations by user logged in
      tags:
      - orders
  /occupations:
    get:
      consumes:
      - application/json
      description: used to find all occupations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Occupation'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: GetOccupations used to find occupations
      tags:
      - categories
  /order/charge:
    post:
      description: add new order
      parameters:
      - description: Order
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/entity.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: AddOrder api used to add order
      tags:
      - orders
  /order/payment:
    post:
      description: add new order
      parameters:
      - description: PaymentNotification
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/entity.PaymentNotification'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Order'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: AddOrder api used to add order
      tags:
      - orders
  /quotation/approved:
    post:
      description: approve quotation
      parameters:
      - description: QuotationIdentity
        in: body
        name: quotation
        required: true
        schema:
          $ref: '#/definitions/entity.QuotationIdentity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.QuotationIdentity'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: ApproveQuotation api used to approve quotation
      tags:
      - orders
  /quotation/declined:
    post:
      description: decline quotation
      parameters:
      - description: QuotationIdentity
        in: body
        name: quotation
        required: true
        schema:
          $ref: '#/definitions/entity.QuotationIdentity'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.QuotationIdentity'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: DeclineQuotation api used to decline quotation
      tags:
      - orders
  /quotations:
    get:
      description: get quotations by campaign id
      parameters:
      - in: query
        name: brief_id
        type: integer
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.QuotationList'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetQuotations get quotations by campaign id
      tags:
      - orders
  /salary-rates/{id}:
    get:
      consumes:
      - application/json
      description: used to find all salary rates
      parameters:
      - description: SubCategory ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Rate'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: GetSalaryRates used to find salary rates
      tags:
      - categories
  /sub-categories:
    get:
      consumes:
      - application/json
      description: find all sub category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.SubCategory'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetSubCategories used to find all sub category
      tags:
      - categories
  /sub-categories/{id}:
    get:
      consumes:
      - application/json
      description: used to find all sub category by category id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.SubCategory'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: GetSubCategoriesByCategoryID used to find all sub category by category id
      tags:
      - categories
  /talent:
    get:
      consumes:
      - application/json
      description: find talent login
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Talent'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindTalentByLogin used to find talent login
      tags:
      - talents
    post:
      description: Create a new talent
      parameters:
      - description: New Talent
        in: body
        name: talent
        required: true
        schema:
          $ref: '#/definitions/entity.Talent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Talent'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: AddTalent api used to create new talent
      tags:
      - talents
  /talent/{id}:
    get:
      consumes:
      - application/json
      description: find talent by id
      parameters:
      - description: Talent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Talent'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindtalentById used to find talent by it's primary key
      tags:
      - talents
  /talent/service:
    post:
      description: Create a new service
      parameters:
      - description: New Service for talent
        in: body
        name: service
        required: true
        schema:
          $ref: '#/definitions/entity.Service'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Service'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: AddService api used to create new service for talent
      tags:
      - talents
  /talent/service/{id}:
    get:
      consumes:
      - application/json
      description: find service by id
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Service'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindServiceByID used to find service by primary key
      tags:
      - talents
  /talents:
    get:
      consumes:
      - application/json
      description: find talents
      parameters:
      - in: query
        name: brief_id
        type: integer
      - in: query
        name: category_id
        type: integer
      - in: query
        name: expertise_name
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: q
        type: string
      - in: query
        name: sub_category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.TalentResults'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetTalents is api to find talents by params
      tags:
      - talents
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: New User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: AddUser api used to signup
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Edit user
      parameters:
      - description: Edit User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: EditUser api used to edit profile
      tags:
      - users
  /user/incomes:
    get:
      consumes:
      - application/json
      description: find incomes of user
      parameters:
      - in: query
        name: can_withdrawal
        type: boolean
      - in: query
        name: end_date
        type: string
      - in: query
        name: has_withdraw
        type: boolean
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: query
        type: string
      - in: query
        name: start_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Income'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetIncomes find incomes of user
      tags:
      - users
  /user/incomes/total:
    get:
      consumes:
      - application/json
      description: find incomes of user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Income'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetIncomes find incomes of user
      tags:
      - users
  /users:
    get:
      consumes:
      - application/json
      description: find users
      parameters:
      - in: query
        name: brief_id
        type: integer
      - in: query
        name: category_id
        type: integer
      - in: query
        name: expertise_name
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: q
        type: string
      - in: query
        name: sub_category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetUsers is api to find users by service params
      tags:
      - talents
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
