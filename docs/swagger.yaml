basePath: /api/v1
definitions:
  entity.BusinessType:
    properties:
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
    type: object
  entity.Campaign:
    properties:
      category:
        $ref: '#/definitions/entity.Category'
        type: object
      category_id:
        type: integer
      currency:
        type: string
      detail:
        type: string
      end_date:
        type: string
      end_price:
        type: number
      id:
        type: integer
      location:
        $ref: '#/definitions/entity.Location'
        type: object
      location_id:
        type: integer
      payment_days:
        $ref: '#/definitions/entity.PaymentDays'
        type: object
      payment_days_id:
        type: integer
      payment_terms:
        $ref: '#/definitions/entity.PaymentTerms'
        type: object
      payment_terms_id:
        type: integer
      staff_amount:
        type: integer
      start_date:
        type: string
      start_price:
        type: number
      status:
        type: string
      sub_category:
        $ref: '#/definitions/entity.SubCategory'
        type: object
      sub_category_id:
        type: integer
      title:
        type: string
    required:
    - currency
    - detail
    - end_price
    - staff_amount
    - start_price
    - title
    type: object
  entity.Category:
    properties:
      is_searchable:
        type: boolean
      is_usable:
        type: boolean
      name:
        type: string
      slug:
        type: string
      sub_categories:
        items:
          $ref: '#/definitions/entity.SubCategory'
        type: array
    type: object
  entity.Document:
    properties:
      filename:
        type: string
      id:
        type: integer
      message:
        type: string
      size:
        type: integer
      url:
        type: string
    type: object
  entity.Expertise:
    properties:
      is_searchable:
        type: boolean
      is_usable:
        type: boolean
      name:
        type: string
      slug:
        type: string
    type: object
  entity.Image:
    properties:
      id:
        type: integer
      image_url:
        type: string
    required:
    - image_url
    type: object
  entity.Location:
    properties:
      address:
        type: string
      formatted_address:
        type: string
      icon:
        type: string
      id:
        type: integer
      international_phone_number:
        type: string
      lat:
        type: number
      lng:
        type: number
      name:
        type: string
      phone_number:
        type: string
      place_id:
        type: string
    required:
    - formatted_address
    - lat
    - lng
    type: object
  entity.PaymentDays:
    properties:
      days:
        type: integer
      id:
        type: integer
    required:
    - days
    type: object
  entity.PaymentTerms:
    properties:
      id:
        type: integer
      name:
        type: string
      slug:
        type: string
    required:
    - name
    type: object
  entity.Service:
    properties:
      category:
        $ref: '#/definitions/entity.Category'
        type: object
      category_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      portfolios:
        items:
          $ref: '#/definitions/entity.Image'
        type: array
      start_price:
        type: number
      sub_category:
        $ref: '#/definitions/entity.SubCategory'
        type: object
      sub_category_id:
        type: integer
      talent_id:
        type: integer
      topics:
        items:
          $ref: '#/definitions/entity.Expertise'
        type: array
    required:
    - description
    type: object
  entity.SocialMedia:
    properties:
      icon:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - name
    type: object
  entity.SubCategory:
    properties:
      category_id:
        type: integer
      is_searchable:
        type: boolean
      is_usable:
        type: boolean
      name:
        type: string
      slug:
        type: string
    type: object
  entity.Talent:
    properties:
      account:
        $ref: '#/definitions/entity.User'
        type: object
      background:
        $ref: '#/definitions/entity.Image'
        type: object
      background_image_id:
        type: integer
      birth_date:
        type: string
      business_type:
        $ref: '#/definitions/entity.BusinessType'
        type: object
      business_type_id:
        type: integer
      engagement:
        type: number
      expertises:
        items:
          $ref: '#/definitions/entity.Expertise'
        type: array
      facebook_followers_count:
        type: integer
      facebook_link:
        type: string
      gender:
        type: string
      height:
        type: integer
      id:
        type: integer
      image:
        $ref: '#/definitions/entity.Image'
        type: object
      image_id:
        type: integer
      instagram_followers_count:
        type: integer
      instagram_link:
        type: string
      is_verified:
        type: boolean
      location:
        $ref: '#/definitions/entity.Location'
        type: object
      location_id:
        type: integer
      phone:
        type: string
      services:
        items:
          $ref: '#/definitions/entity.Service'
        type: array
      twitter_followers_count:
        type: integer
      twitter_link:
        type: string
      user_id:
        type: integer
      youtube_followers_count:
        type: integer
      youtube_link:
        type: string
    required:
    - birth_date
    - gender
    - height
    - instagram_link
    type: object
  entity.User:
    properties:
      email:
        type: string
      name:
        type: string
      type:
        type: string
    required:
    - email
    - name
    - type
    type: object
  entity.UserForm:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      type:
        type: string
    required:
    - email
    - name
    - password
    - type
    type: object
  repository.CampaignsFilter:
    properties:
      date:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      onlyme:
        type: boolean
      q:
        type: string
    type: object
  repository.FilteredTalent:
    properties:
      category_id:
        type: integer
      expertise_name:
        type: string
      limit:
        type: integer
      offset:
        type: integer
      q:
        type: string
      sub_category_id:
        type: integer
    type: object
  translate.ResultErrors:
    properties:
      message:
        example: Dynamic message
        type: string
      status:
        example: Bad Request
        type: string
      status_code:
        example: 400
        type: integer
    type: object
  translate.ResultSuccess:
    properties:
      data:
        type: object
      status:
        example: OK
        type: string
      status_code:
        example: 200
        type: integer
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is event staffing application management
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Spgku Application
  version: "1.0"
paths:
  /auth/token:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Sign in by using email and password
      parameters:
      - description: your account email
        in: query
        name: email
        required: true
        type: string
      - description: your account password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Campaign'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/translate.ResultErrors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: Sign In
      tags:
      - users
  /campaigns:
    get:
      consumes:
      - application/json
      description: find campaign by date
      parameters:
      - in: query
        name: date
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: onlyme
        type: boolean
      - in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.Campaign'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetCampaigns used to find campaign by specific params
      tags:
      - campaigns
    post:
      description: Create a new campaign
      parameters:
      - description: New Campaign
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/entity.Campaign'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Campaign'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: AddCampaign api used to create new campaign
      tags:
      - campaigns
  /campaigns/{id}:
    get:
      consumes:
      - application/json
      description: find campaign by id
      parameters:
      - description: Campaign ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Campaign'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindcampaignById used to find campaign by it's primary key
      tags:
      - campaigns
  /campaigns/documents:
    post:
      consumes:
      - multipart/form-data
      description: Upload file
      parameters:
      - description: campaign image
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Document'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/translate.ResultErrors'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: Upload documents
      tags:
      - campaigns
  /campaigns/payment-days:
    get:
      consumes:
      - application/json
      description: find all payment days
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.PaymentDays'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetPaymentDays used to find all payment days list
      tags:
      - campaigns
  /campaigns/payment-terms:
    get:
      consumes:
      - application/json
      description: find all payment terms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.PaymentTerms'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetPaymentTerms used to find all payment terms list
      tags:
      - campaigns
  /campaigns/social-media:
    get:
      consumes:
      - application/json
      description: find campaign by date
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/entity.SocialMedia'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetAllSocialMedia used to find all social media list
      tags:
      - campaigns
  /categories:
    get:
      consumes:
      - application/json
      description: find all category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/translate.ResultSuccess'
              - properties:
                  data:
                    $ref: '#/definitions/entity.Category'
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetCategories used to find all categories
      tags:
      - categories
  /expertises:
    get:
      consumes:
      - application/json
      description: used to find all expertises
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/translate.ResultSuccess'
              - properties:
                  data:
                    $ref: '#/definitions/entity.Expertise'
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: GetExpertises used to find all expertises
      tags:
      - categories
  /sub-categories:
    get:
      consumes:
      - application/json
      description: find all sub category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/translate.ResultSuccess'
              - properties:
                  data:
                    $ref: '#/definitions/entity.SubCategory'
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetSubCategories used to find all sub category
      tags:
      - categories
  /sub-categories/{id}:
    get:
      consumes:
      - application/json
      description: used to find all sub category by category id
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/translate.ResultSuccess'
              - properties:
                  data:
                    $ref: '#/definitions/entity.SubCategory'
                type: object
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: GetSubCategoriesByCategoryID used to find all sub category by category id
      tags:
      - categories
  /talents:
    get:
      consumes:
      - application/json
      description: find talents
      parameters:
      - in: query
        name: category_id
        type: integer
      - in: query
        name: expertise_name
        type: string
      - in: query
        name: limit
        type: integer
      - in: query
        name: offset
        type: integer
      - in: query
        name: q
        type: string
      - in: query
        name: sub_category_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Talent'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: GetTalents is api to find talents by params
      tags:
      - talents
    post:
      description: Create a new talent
      parameters:
      - description: New Talent
        in: body
        name: talent
        required: true
        schema:
          $ref: '#/definitions/entity.Talent'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Talent'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: AddTalent api used to create new talent
      tags:
      - talents
  /talents/{id}:
    get:
      consumes:
      - application/json
      description: find talent by id
      parameters:
      - description: Talent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.Talent'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      security:
      - ApiKeyAuth: []
      summary: FindtalentById used to find talent by it's primary key
      tags:
      - talents
  /user:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: New User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/entity.UserForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/translate.ResultSuccess'
            - properties:
                data:
                  $ref: '#/definitions/entity.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/translate.ResultErrors'
      summary: AddUser api used to signup
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
