// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/campaigns": {
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "campaigns"
                ],
                "summary": "AddCampaign api used to signup",
                "parameters": [
                    {
                        "description": "New Campaign",
                        "name": "campaign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Campaign"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/translate.ResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Campaign"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/translate.ResultErrors"
                        }
                    }
                }
            }
        },
        "/digital-staffs": {
            "get": {
                "description": "Create a new digital staff category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "GetDigitalStaff used to categories help digital staff",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.DigitalStaff"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/translate.ResultErrors"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new digital staff category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "AddDigitalStaff Add new digital staf",
                "parameters": [
                    {
                        "description": "New DigitalStaff",
                        "name": "digitallStaff",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.DigitalStaff"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/translate.ResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.DigitalStaff"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/translate.ResultErrors"
                        }
                    }
                }
            }
        },
        "/event-staffs": {
            "get": {
                "description": "Get all data of event staff",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "GetEventStaff used to categories help event staff",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.EventStaff"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/translate.ResultErrors"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new digital staff category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "staff"
                ],
                "summary": "AddEventStaff used to add new event staff",
                "parameters": [
                    {
                        "description": "New Event Staff",
                        "name": "eventStaff",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.EventStaff"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/translate.ResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.EventStaff"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/translate.ResultErrors"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Create a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "AddUser api used to signup",
                "parameters": [
                    {
                        "description": "New User",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/translate.ResultSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/translate.ResultErrors"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Campaign": {
            "type": "object",
            "required": [
                "criteria",
                "detail",
                "end_date",
                "end_price",
                "method",
                "social_media",
                "start_date",
                "start_price",
                "task",
                "title"
            ],
            "properties": {
                "criteria": {
                    "type": "string"
                },
                "detail": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "end_price": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Image"
                    }
                },
                "location": {
                    "type": "object",
                    "$ref": "#/definitions/entity.Location"
                },
                "location_id": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "sample_product": {
                    "type": "string"
                },
                "social_media": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.SocialMedia"
                    }
                },
                "staff_amount": {
                    "type": "integer"
                },
                "start_date": {
                    "type": "string"
                },
                "start_price": {
                    "type": "number"
                },
                "task": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "entity.DigitalStaff": {
            "type": "object",
            "required": [
                "image",
                "subtitle",
                "title"
            ],
            "properties": {
                "followers": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "image": {
                    "type": "string"
                },
                "subtitle": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "entity.EventStaff": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "entity.Image": {
            "type": "object",
            "required": [
                "image_url"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "image_url": {
                    "type": "string"
                }
            }
        },
        "entity.Location": {
            "type": "object",
            "required": [
                "formatted_address",
                "lat",
                "lng"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "formatted_address": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "international_phone_number": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                },
                "phone_number": {
                    "type": "string"
                },
                "place_id": {
                    "type": "string"
                }
            }
        },
        "entity.SocialMedia": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.User": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "type"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "translate.ResultErrors": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Dynamic message"
                },
                "status": {
                    "type": "string",
                    "example": "Bad Request"
                },
                "status_code": {
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "translate.ResultSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object"
                },
                "status": {
                    "type": "string",
                    "example": "OK"
                },
                "status_code": {
                    "type": "integer",
                    "example": 200
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8000",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Spgku Application",
	Description: "This is event staffing application management",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
